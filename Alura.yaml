openapi: 3.0.3
info: 
  title: API de teste 
  description: API do curso da Alura sobre Swagger, nesse caso não será utilizada nenhuma API existente e os links anexados são apenas demonstrativos. Mas em tese essa APi seria para um consultório médico
  version: 0.0.1
  contact:
    name: Suporte 
    email: emai_exemplo@gmail.com 
    url: https://pt.wikipedia.org/wiki/O_Fantasma_da_%C3%93pera_no_Royal_Albert_Hall
  license:
    name: "Licença: GPLv3"
    url: https://www.gnu.org/licenses/gpl-3.0.html
  termsOfService: https://www.youtube.com/watch?v=qpbX7SbXOtU 
externalDocs:
  description: Documentação da api pronta 
  url: http://localhost:8080/swagger/index.html#/
servers: 
- url: https://servidor_local
  description: API local
- url: https://servidor_producao
  description: API produção
paths:
  /v1/especialidades:
   post:
    tags:
     - especialidades
    summary: Criar
    description: "Criar uma nova especialidade" 
    requestBody:
      content:
        application/json:
         schema:
           type: object
           properties:
             id:
              type: string
             CRM:
              type: integer
             nome:
              type: string
    responses:
       201:
        description: Created
        content:
          application/json:
           example: "Especialidade adicionada com sucesso"
       422: 
        description: Unprocessable Entity
        content:
          application/json:
           example: "Campo preenchido incorretamente"
   get:
     tags:
      - especialidades 
     summary: Listagem
     description: Listar especialidades dos médicos da clinica 
     #implementando o uso do token de login
     security: 
     - auth: []
     responses:
       200:
        description: Success
        content:
          application/json:
           schema:
             type: array
             items:
          #Para conseguir o que eu preciso faço dessa forma
          #referencio e coloco a "localização" da parte di componente que desejo  
               $ref: "#/components/schemas/especialidades"
  /v1/especialidades/{id}:
   parameters: 
   - name: id
     in: path 
     schema: 
       type: string 
     required: true 
   get: 
    tags:
     - especialidades 
    summary: Buscar por ID 
    responses:
      200:
       description: Success
       content:
         application/json:
          schema:
            type: object
            properties:
              id: 
               type: string
              descricao: 
               type: string
      404:
       description: "Not Found"
       content: 
         application/json: 
          example: "Especialidade com o ID especificado não encontrada"
   put:
    tags:
     - especialidades
    summary: Alterar
    description: "Altera uma especialidade especificada pelo id"
    requestBody: 
      content: 
       application/json:
        schema:
         type: object
         properties: 
          nome: 
           type: string 
          descricao:
           type: string 
    responses: 
     200: 
      description: Success 
      content:
        application/json:
         example: "Especialidade alterada com sucesso"
     404: 
      description: "Not Found"
      content:
        application/json:
         example: "Especialidade com o ID especificado não encontrada"
     422: 
      description: Unprocessable Entity
      content:
        application/json:
         example: "Campo preenchido incorretamente"
   delete:
     tags:
      - especialidades
     summary: Delete
     description: "Delete uma especialidade especificada pelo ID"
     responses:
       200: 
        description: Success
        content:
          application/json:
           example: "Especialidade deleta com sucesso"
       404: 
        description: Not Found
        content:
          application/json:
           example: "Especialidade com o ID especificado não encontrada"
  /v1/medicos:
   post: 
    tags: 
     - medicos
    summary: Criar 
    description: "Criar novo cadastro médico no consultório"
    requestBody:
      content:
        application/json:
         schema:
          type: object
          properties:
            id:
             type: string
            CRM: 
             type: integer 
            nome:
             type: string
    responses:
      201:
       description: Created
       content:
         application/json:
          example: "Médico adicionado com sucesso"
      422:
       description: Unprocessable Entity
       content:
         application/json:
           example: "Campo preenchido incorretamente"
   get: 
    tags:
     - medicos
    summary: Listagem 
    description: Lista todos os médicos do consultório
    responses:
      200:
       description: Success
       content:
         application/json:
          schema:
            type: array
            items:
             type: object
             properties:
               id: 
                type: string 
               CRM: 
                type: integer
               nome: 
                type: string
  /v1/medicos/{id}:
   parameters:
   - name: id 
     in: path
     schema: 
       type: string 
     required: true 
   get: 
    tags:
     - medicos
    summary: Busca por ID 
    description: Busca médico já cadastrado especificado pelo ID
    responses: 
      200: 
       description: Success
       content: 
        application/json:
         schema: 
          type: object
          properties: 
            id: 
             type: string
            CRM: 
             type: integer
            nome: 
             type: string
      404:
       description: "Not Found"
       content:
         application/json:
          example: Médico com o Id especificado não encontrado
   put:
    tags: 
     - medicos 
    summary: Alterar
    description: "Altera os dados de um médico especificado pelo ID"
    requestBody:
      content:
        application/json:
         schema:
           type: object
           properties:
             id: 
              type: string 
             CRM:
              type: integer
             nome: 
              type: string 
    responses:
      200: 
       description: Success
       content:
         application/json:
          example: "Dados do médico alterados com sucesso"
      404:
       description: Not Found
       content:
         application/json:
          example: "Médico com o Id especificado não encontrado"
      422:
       description: Unprocessable Entity
       content:
         application/json:
          example: "Campo preenchido incorretamente"
   delete: 
    summary: Delete
    description: "Deleta um médico especificado pelo ID"
    tags:
     - medicos
    responses:
      200: 
       description: Success
       content:
         application/json:
          example: "Médico deletado com sucesso"
      404:
       description: Not Found
       content:
         application/json:
          example: "Médico especificado pelo Id não encontrado"
# dessa forma todas as rotas terão um atenticação a ser feita
security: 
 - auth: []
#componentes sereve para reduzir a digitação durante o código, tipo as funções em go
#é sempre escrito fora do código principal e não necessariamente um schema
components:
  schemas:
#   id:
#    type: string
#    title: "é mais infomativo"
#    description: "informação mais detalhada óbvio"
#é possivel definir o valor máximo e minimo de carasteres que esse id vai ter
#    minimum: 3
#    maximum: 225
   especialidades:
#as propriedades nada mais são que os meus campos, tipos e descrição deles
    properties:  
      id:
       type: string
       description: "pode ter uma descrição aqui também"
      descricao:
       type: string
       description: "descrição do campo especificado"
      data:
       type: string
       #posso adicionar um formato
       format: data-time
#posso também deixa respostas pré definidas
#  responses:
#   Especialidades:
#    id: 
#     type: string 
#    descricao: 
#     type: string  
#Definindo a segurança como, por exemplo, senhas e validações
  securitySchemes:
      auth:
       type: http
       scheme: bearer
       bearerFormat: JWT (serve somente para saber o formato do token)
              
              
             
